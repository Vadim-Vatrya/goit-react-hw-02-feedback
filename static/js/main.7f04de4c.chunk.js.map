{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","components/Statistic/Statistic.jsx","components/Section/Section.jsx","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","key","name","onClick","shortid","Notification","message","Statistic","good","neutral","bad","total","positivePercentage","Section","title","children","App","useState","setGood","setNeutral","setBad","event","target","textContent","prevGood","prevNeutral","prevBad","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAwBeA,EApBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,8BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAGEC,KAAMD,EACNE,QAASJ,EAJX,SAMGE,GALIG,aCCEC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCyB3BC,EAxBG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OAChB,mCACGD,EACC,+BACE,uCAAUH,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,UAGF,cAAC,EAAD,CAAcN,QAAQ,yBCAbO,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,gCACE,6BAAKD,IACJC,MC4IUC,MAjEf,WAAe,MAOWC,mBAAS,GAPpB,mBAONT,EAPM,KAOAU,EAPA,OAQiBD,mBAAS,GAR1B,mBAQNR,EARM,KAQGU,EARH,OASSF,mBAAS,GATlB,mBASNP,EATM,KASDU,EATC,KA2Cb,OACE,gCACE,cAAC,EAAD,CAASN,MAAO,wBAAhB,SACE,cAAC,EAAD,CACEhB,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBA9Be,SAAAsB,GAErB,OADaA,EAAMC,OAAOC,aAExB,IAAK,OACHL,GAAQ,SAAAM,GAAQ,OAAIA,EAAW,KAC/B,MACF,IAAK,UACHL,GAAW,SAAAM,GAAW,OAAIA,EAAc,KACxC,MACF,IAAK,MACHL,GAAO,SAAAM,GAAO,OAAIA,EAAU,WAwB9B,cAAC,EAAD,CAASZ,MAAO,aAAhB,SACE,cAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MA3CQH,EAAOC,EAAUC,EA4CzBE,mBArB0Be,KAAKC,MAClCpB,GAAQA,EAAOC,EAAUC,GAAQ,KAAO,WCnH/CmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7f04de4c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport shortid from \"shortid\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <div>\r\n    {options.map((key) => (\r\n      <button\r\n        key={shortid()}\r\n        // className={styles.btn}\r\n        name={key}\r\n        onClick={onLeaveFeedback}\r\n      >\r\n        {key}\r\n      </button>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Notification from \"../Notification\";\r\n\r\nconst Statistic = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <>\r\n    {total ? (\r\n      <ul>\r\n        <li>Good:{good}</li>\r\n        <li>Neutral:{neutral}</li>\r\n        <li>Bad:{bad}</li>\r\n        <li>Total:{total}</li>\r\n        <li>Positive Feedback:{positivePercentage}%</li>\r\n      </ul>\r\n    ) : (\r\n      <Notification message=\"No feedback given\" />\r\n    )}\r\n  </>\r\n);\r\n\r\nStatistic.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistic;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <div>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","// import React, { Component } from \"react\";\n// import PropTypes from \"prop-types\";\n\n// import FeedbackOptions from \"./components/FeedbackOptions\";\n// import Statistic from \"./components/Statistic\";\n// import Section from \"./components/Section\";\n\n// class App extends Component {\n//   static defaultProps = {\n//     initialGood: 0,\n//     initialNeutral: 0,\n//     initialBad: 0,\n//   };\n\n//   static propTypes = {\n//     initialGood: PropTypes.number,\n//     initialNeutral: PropTypes.number,\n//     initialBad: PropTypes.number,\n//   };\n\n//   state = {\n//     good: this.props.initialGood,\n//     neutral: this.props.initialNeutral,\n//     bad: this.props.initialBad,\n//   };\n\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     const total = good + neutral + bad;\n//     return total;\n//   };\n\n//   handleFeedback = (event) => {\n//     const name = event.target.textContent;\n//     this.setState((prevState) => ({ [name]: prevState[name] + 1 }));\n//   };\n\n//   countPositiveFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     const percentPositiveFeedback = Math.round(\n//       (good / (good + neutral + bad)) * 100 || 0\n//     );\n//     return percentPositiveFeedback;\n//   };\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const countTotalFeedback = this.countTotalFeedback;\n//     const countPositiveFeedback = this.countPositiveFeedback;\n//     const options = Object.keys(this.state);\n//     return (\n//       <div>\n//         <Section title={\"Please leave feedback\"}>\n//           <FeedbackOptions\n//             options={options}\n//             onLeaveFeedback={this.handleFeedback}\n//           />\n//         </Section>\n\n//         <Section title={\"Statistics\"}>\n//           <Statistic\n//             good={good}\n//             neutral={neutral}\n//             bad={bad}\n//             total={countTotalFeedback()}\n//             positivePercentage={countPositiveFeedback()}\n//           />\n//         </Section>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\n\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistic from './components/Statistic';\nimport Section from './components/Section';\n\nfunction App() {\n  // const [state, setState] = useState({\n  //   good: 0,\n  //   neutral: 0,\n  //   bad: 0,\n  // });\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  // const options = Object.keys(state);\n\n  const countTotalFeedback = () => {\n    // const { good, neutral, bad } = state;\n    const total = good + neutral + bad;\n    return total;\n  };\n\n  const handleFeedback = event => {\n    const name = event.target.textContent;\n    switch (name) {\n      case 'good':\n        setGood(prevGood => prevGood + 1);\n        break;\n      case 'neutral':\n        setNeutral(prevNeutral => prevNeutral + 1);\n        break;\n      case 'bad':\n        setBad(prevBad => prevBad + 1);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const countPositiveFeedback = () => {\n    // const { good, neutral, bad } = state;\n    const percentPositiveFeedback = Math.round(\n      (good / (good + neutral + bad)) * 100 || 0,\n    );\n    return percentPositiveFeedback;\n  };\n\n  return (\n    <div>\n      <Section title={'Please leave feedback'}>\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={handleFeedback}\n        />\n      </Section>\n\n      <Section title={'Statistics'}>\n        <Statistic\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback()}\n          positivePercentage={countPositiveFeedback()}\n        />\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}